import {
  FormContext_default
} from "./chunk-WNNQXZR6.js";
import {
  require_warning
} from "./chunk-VK2LAMG5.js";
import {
  require_prop_types
} from "./chunk-DTYU3ZSL.js";
import {
  require_classnames,
  useBootstrapPrefix
} from "./chunk-GTUBTAHR.js";
import {
  require_jsx_runtime
} from "./chunk-C2NTD3X5.js";
import {
  require_react
} from "./chunk-42CJYN7C.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// ../node_modules/react-bootstrap/esm/FormControl.js
var import_classnames2 = __toESM(require_classnames());
var React2 = __toESM(require_react());
var import_react = __toESM(require_react());
var import_warning = __toESM(require_warning());

// ../node_modules/react-bootstrap/esm/Feedback.js
var import_classnames = __toESM(require_classnames());
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var propTypes = {
  type: import_prop_types.default.string,
  tooltip: import_prop_types.default.bool,
  as: import_prop_types.default.elementType
};
var Feedback = React.forwardRef(
  ({
    as: Component = "div",
    className,
    type = "valid",
    tooltip = false,
    ...props
  }, ref) => (0, import_jsx_runtime.jsx)(Component, {
    ...props,
    ref,
    className: (0, import_classnames.default)(className, `${type}-${tooltip ? "tooltip" : "feedback"}`)
  })
);
Feedback.displayName = "Feedback";
Feedback.propTypes = propTypes;
var Feedback_default = Feedback;

// ../node_modules/react-bootstrap/esm/FormControl.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var FormControl = React2.forwardRef(({
  bsPrefix,
  type,
  size,
  htmlSize,
  id,
  className,
  isValid = false,
  isInvalid = false,
  plaintext,
  readOnly,
  as: Component = "input",
  ...props
}, ref) => {
  const {
    controlId
  } = (0, import_react.useContext)(FormContext_default);
  bsPrefix = useBootstrapPrefix(bsPrefix, "form-control");
  let classes;
  if (plaintext) {
    classes = {
      [`${bsPrefix}-plaintext`]: true
    };
  } else {
    classes = {
      [bsPrefix]: true,
      [`${bsPrefix}-${size}`]: size
    };
  }
  true ? (0, import_warning.default)(controlId == null || !id, "`controlId` is ignored on `<FormControl>` when `id` is specified.") : void 0;
  return (0, import_jsx_runtime2.jsx)(Component, {
    ...props,
    type,
    size: htmlSize,
    ref,
    readOnly,
    id: id || controlId,
    className: (0, import_classnames2.default)(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === "color" && `${bsPrefix}-color`)
  });
});
FormControl.displayName = "FormControl";
var FormControl_default = Object.assign(FormControl, {
  Feedback: Feedback_default
});

export {
  Feedback_default,
  FormControl_default
};
//# sourceMappingURL=chunk-DVZRBWZ6.js.map
